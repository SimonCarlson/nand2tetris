// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Bit 15: 0 is A instruction, 1 is C instruction
    Not(in=instruction[15], out=notIn);
    Mux16(a=aluOut, b=instruction, sel=notIn, out=instructionOut);

    // Bit 5 (d1): if 1, A is destination
    Or(a=notIn, b=instruction[5], out=loadA);
    ARegister(in=instructionOut, load=loadA, out=A, out[0..14]=addressM);

    // Bit 12: use M instead of A
    And(a=instruction[15], b=instruction[12], out=AorM);
    Mux16(a=A, b=inM, sel=AorM, out=memoryOut);

    // Bits 11-6: c-bits in C instruction
    ALU(x=D, y=memoryOut, zx=instruction[11], nx=instruction[10], zy=instruction[9], 
        ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=zr, ng=ng);

    // Bit 4: Store result in D
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=D);

    // Bit 3: Store result in M
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Output positive
    Not(in=ng, out=pos);
    // Output non-zero
    Not(in=zr, out=nzr);
    // Bit j3: indicates JGT if C-instruction
    And(a=instruction[15], b=instruction[0], out=jgt);
    And(a=pos, b=nzr, out=posnzr);
    // JGT: positive non-zero number
    And(a=jgt, b=posnzr, out=ld1);

    // Bit j2: indicates JEQ if C-instruction
    And(a=instruction[15], b=instruction[1], out=jeq);
    // JEQ: equals zero
    And(a=jeq, b=zr, out=ld2);

    // Bit j1: indicates JLT if C-instruction
    And(a=instruction[15], b=instruction[2], out=jlt);
    // JLT: lesser than zero (ng)
    And(a=jlt, b=ng, out=ld3);

    // If j1 j2 j3 are 0 -> no jump instruction, ld = 0 and PC is incremented
    Or(a=ld1, b=ld2, out=ldt);
    Or(a=ld3, b=ldt, out=ld);

    PC(in=A, load=ld, inc=true, reset=reset, out[0..14]=pc);
}